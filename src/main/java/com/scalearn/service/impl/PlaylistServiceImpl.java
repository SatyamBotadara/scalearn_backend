package com.scalearn.service.impl;

import com.scalearn.dto.BasePathEnum;
import com.scalearn.dto.PlayListDto;
import com.scalearn.entity.Playlist;
import com.scalearn.exception.custom.CustomException;
import com.scalearn.exception.custom.DuplicateIdException;
import com.scalearn.exception.custom.ItemNotFoundException;
import com.scalearn.repository.PlaylistRepo;
import com.scalearn.service.PlaylistService;
import com.scalearn.service.VideoService;
import com.scalearn.utility.DirectoryUtility;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j2;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
@Log4j2
@AllArgsConstructor
public class PlaylistServiceImpl implements PlaylistService {

    private final PlaylistRepo playlistRepo;

    private final VideoService videoService;

    private final DirectoryUtility dirUtility;

    @Override
    public Playlist insertPlaylist( Playlist playlist ) {
        // setting up random generated id to playlist
        playlist.setId(UUID.randomUUID().toString());
        // this condition is require for checking if duplicate uuid is generated by random algorithm
        if( playlistRepo.findById(playlist.getId()).isPresent() ) {
            log.error("Duplicate playlist id");
            log.error("Playlist id -> {} is already present in database",playlist.getId());
            throw new DuplicateIdException("Playlist id already present");
        }
        var playlistDb = playlistRepo.save(playlist);
        dirUtility.createDirectory(playlistDb.getId(), BasePathEnum.PLAYLIST);
        return playlistDb;
    }

    @Override
    public List<PlayListDto> getAllPlaylist() {
        return playlistRepo.findListOfPlaylist();
    }

    @Override
    public Playlist getPlaylistById(String id) throws ItemNotFoundException {
        return playlistRepo.findById(id).orElseThrow( () ->
                new ItemNotFoundException("Playlist not found"));
    }

    @Override
    public void deletePlaylistById(String id) throws ItemNotFoundException {
        var playlist = playlistRepo.findById(id).orElseThrow(() ->
         new ItemNotFoundException("Playlist not found of id "+id));
        // delete each video inside playlist
        playlist.getVideoList().forEach(playlistElement->
                videoService.deleteVideoById(playlistElement.getId()));
        
        // delete playlist
        playlistRepo.deleteById(id);
        dirUtility.deleteDirectory(id,BasePathEnum.PLAYLIST);
    }

    @Override
    public Playlist updatePlaylist(Playlist playlist) throws ItemNotFoundException {
        var id = playlist.getId();
        if( id == null || id.isBlank() || id.isEmpty() )
            throw new CustomException("Id should not be blank");

        var playlistDb = playlistRepo.findById(id).orElseThrow(() ->
                new ItemNotFoundException("Playlist not found of id "+id) );

        playlistDb.setTitle(playlist.getTitle());
        playlistDb.setPlaylistType(playlist.getPlaylistType());
        playlistDb.setDesc(playlist.getDesc());
        playlistDb.setAuthor(playlist.getAuthor());
        playlistDb.setDuration(playlist.getDuration());
        playlistDb.setImageUrl(playlist.getImageUrl());
        playlistDb.setPrice(playlist.getPrice());
        playlistDb.setIsPremium(playlist.getIsPremium());

        return playlistRepo.save(playlistDb);
    }

}